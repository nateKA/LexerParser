<!--

This is a sample xml document that acts as an instruction on how to format and use functionality
of the Lexer/Parser that generate from xmls.

The xml you create should follow the same schema, or your parser will not compile correctly

Here is the way LexerParser works
    Compile
        - Parser is created, it contains a lexer=null.
        - parser.compile(file) is called. Now the parser instantiates a lexer.
        - lexer compiles the Token section of the xml, parser compiles the pattern section.
    Parsing
        - parser.parse(...) or parser.extractPatterns(...) is called.
        - the parser will call lexer.tokenize(...) to get an initial list of Tokens
        - parser will then start at the first Token in the list, and try to match a Pattern
        - The first Pattern to match will be the accepted Pattern. This will be added to a list of Patterns
        - parser will now pick the first Token that was not part of the Pattern and follows all other Tokens in the Pattern.
            If no Pattern matched, then parser looks at the next Token in the list
        - parser reaches the end of the list of Tokens. Now, if parser.extractPatterns(...) was called, parser returns
            the list of accepted Patterns. If parser.parse(...) was called, parser will convert the Patterns into Tokens
            and merge them into the list of Tokens found by the lexer. This new list of Tokens is returned.

    Here is a visual representation of how a Parser that compiles this xml would parse the following text.

    Original text - "This sample text was created on February 20, 2018 to demonstrate LexerParser"

    parser.parse(...) is called on text

    Lexer Tokenizes - |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
                      |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |

    Parser parses Patterns (*-parser is looking here    +-pattern matches up to here
           *
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []
                *
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []


            ...

                                         *
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []


                                              *+
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []


                                              *         +
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []


                                              *                +
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []


                                              *                      +
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = []


      Pattern created from "|February|20    |,    |2018  |" called 'date'

                                                                            *
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = [date]
                                                                                   *
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = [date]


                                                                                             *
          |This|sample|text|was |created|on  |February|20    |,    |2018  |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|month   |number|punct|number|word|word       |word       |
          list = [date]


      Done parsing. Now parser converts Patterns into Tokens and Merges

      Final Tokens

          |This|sample|text|was |created|on  |February 20, 2018                |to  |demonstrate|LexerParser|
          |word|word  |word|word|word   |word|date                             |word|word       |word       |

Many elements contain attributes that are 'reserveWords' for compiling the lexer/parser. reserveWords fall into two categories
'compileTime' - The reserveWord is used to compile the Lexer/Parser and will not appear in Tokens
'runTime' - The reserveWord is reserved for the Lexer/Parser to add to the tokens. These are bits of information
        that Tokens almost require in order to be useful

Any attribute that is not a reserveWord will be passed on to the Token
        
Here is a list of reserveWords

    Token reserveWords
        boundaries - compileTime - tells Lexer if it should use word boundaries for all Child Regex elements
        ignoreCase - compileTime - tells the Lexer if it should ignore case when matching regex patterns
        addSlashes - compileTime - tells the Lexer if it should add escape characters to regex strings
        XMLtag - compileTime - Used for compiling purposes
        tokenID - compileTime - Used to identify tokens in the report
        annotationText() - runTime - The text that constituted the Token
        startOffset() - runTime - the first character's index in the originating text
        endOffset() - runTime - the last character's index in the originating text

    Regex reserveWords
        regex - compileTime - Some regex Patterns violate xml format. This attribute allows for a backup plan
        XMLtag - compileTime - Used for compiling purposes

    Pattern reserveWords
        Sequence - compileTime - Determines order Pattern is parsed in
        XMLtag - compileTime - Used for compiling purposes

    Rule and Rubric reserveWords
        min - compileTime - A rule must be matched this number of times or more, Setting this to 0 means it is optional
        max - compileTime - A rule cannot be matched more than this number of times
        XMLtag - compileTime - Used for compiling purposes

-->
<XMLBody>
    <tokens>

        <!-- attributes in the <token> tag will be added to a HashMap<String,String> in the Token generated by the Lexer
        i.e. Tokens generated by the block will inherit the attributes granted they are not reserveWords-->
        <token tokenID="word" type="word" >
            <regex>\w+</regex>
        </token>
        <token tokenID="punct" type="punct" >
            <regex>\.</regex>
            <regex>,</regex>
            <regex>'</regex>
            <regex type="hyphen">-</regex>
            <regex>:</regex>
            <regex>\[</regex>
            <regex>]</regex>
            <regex>;</regex>

            <!-- this is an alternative to using the innerXML. Since the '<' is a reserved character by XML
            this is a good use for the 'regex' attribute -->
            <regex sub_type="lessThan" regex="<"/>
        </token>

        <!-- boundaries is a boolean that controls the word boundary in regex i.e. regex = '\b(\d+)\b' -->
        <!--  in other words, "a7fee78" and "73a" are not numbers -->
        <token tokenID="number" type="number" boundaries="true" >
            <regex sub_type="decimal" value="group(1)">(\d+(,\d{3})+)</regex>
            <regex sub_type="decimal" value="group(1)">(\d+)</regex>
            <regex sub_type="binary" value="group(1)">0b(\d{8})</regex>
            <regex sub_type="hexadecimal" value="group(1)">0x(\d{1,8})</regex>
        </token>

        <token tokenID="reference" type="reference">

            <!-- setting an attribute to the group() function call will set that attribute equal to the
            the value of the requested capture group -->
            <regex value="group(1)">No\.\s+(\d+)</regex>
            <regex value="group(1)">\[(\d+)]</regex>
        </token>

        <!-- ignoreCase attribute controls if the regex should ignore case -->
        <token tokenID="month" type="month" boundaries="true" ignoreCase="true">

            <!-- Attributes in the <regex> tag are also added to the Token's HashMap. If a <regex> tag has an
            attribute with the same name as the enclosing <token> tag, the <regex> attribute will overwrite -->
                <regex month="December">dec|december</regex>
                <regex month="January">jan|january</regex>
                <regex month="February">feb|february</regex>
                <regex month="March">mar|march</regex>
                <regex month="April">apr|april</regex>
                <regex month="May">may</regex>
                <regex month="June">jun|june</regex>
                <regex month="July">jul|july</regex>
                <regex month="August">aug|august</regex>
                <regex month="September">sept|sep|september</regex>
                <regex month="October">oct|october</regex>
                <regex month="November">nov|november</regex>
        </token>


        <!-- this token has the potential to find the same test as the month token. When a collision like this
            occurs, the newest token will keep all of its attributes and inherit the attributes from the old token
            if the new one does not already own attributes of the same name -->
        <token tokenID="capitalized" form="capitalized" boundaries="true">
            <regex>[A-Z][a-zA-Z]+</regex>
        </token>
        <token tokenID="placement" type="placement" ignoreCase="true">
            <regex value="1">first|1st</regex>
            <regex value="2">second|2nd</regex>
            <regex value="3">third|3rd</regex>
            <regex value="4">fourth|4th</regex>
            <regex value="5">fifth|5th</regex>
            <regex value="6">sixth|6th</regex>
            <regex value="7">seventh|7th</regex>
            <regex value="8">eighth|8th</regex>
            <regex value="9">ninth|9th</regex>
            <regex value="10">tenth|10th</regex>
        </token>

    </tokens>

    <patterns>
        <!-- when an attribute is set to inherit(<requested key>), the attribute will inherit
            the attribute with the requested key from the tokens that the pattern is found from.
            Rules can do the same
                syntax1: 'att=inherit(key)' when multiple are found att will be split into att_0,att_1, ... att_n
                syntax2: 'att=inherit(key(i))' the i-th token to contain key will become the value of att
                syntax3: 'att=inherit(key(last))' the last token to contain the key will be the value of att
                syntax4: 'att=inherit(key=value(i))' att will be set to the annotationText of the i-th token to
                                    have an attribute name key and equal to value
                syntax5: 'att=inherit(key=value(last))' att will be set to the annotationText of the last token
                                    to have an attribute named key and equal to value
            If no token containing the key is found, the attribute is removed from the PatternResult
            -->
        <pattern type="date" month="inherit(month)" date="inherit(value(0))" year="inherit(value(1))">
            <rule >
                <rubric>
                    <check>type=month</check>
                </rubric>
                <rubric>
                    <!-- a rubric element containing multiple checks will logically AND 
                    each check -->
                    <check>type=number</check>
                    <check>sub_type=decimal</check>
                </rubric>
                <rubric>
                    <check>annotationText()=,</check>
                </rubric>
                <rubric>
                    <check>type=number</check>
                    <check>sub_type=decimal</check>
                </rubric>
            </rule>
        </pattern>
        <!--  The sequence attribute will insert a pattern into the sequencial order
            This is useful for inserting a pattern compiled from an xml ahead of patterns
            that were compiled in a previous xml -->
        <pattern sequence="0" type="word">
            <rule>
                <rubric>
                    <check>type=word</check>
                </rubric>
                <rubric>
                    <check>type=hyphen</check>
                </rubric>
                <rubric>
                    <check>type=word</check>
                </rubric>
            </rule>
        </pattern>
        
        <pattern type="title" >
            <rule max="20">
                <rubric min="2" max="10">
                    <check>form=capitalized</check>
                    <!-- The 'AND;' portion tells the Parser to logically AND this check
                        with every previous check (Since the parser works from top to bottom).
                        A check can also be logical OR as in 'OR;' -->
                    <check>AND;type=word|month</check>
                </rubric>
                <rubric min="0" max="2">
                    <check>type=word|number|month</check>
                    <check>OR;form=capitalized</check>
                </rubric>
            </rule>
        </pattern>
    </patterns>
</XMLBody>
